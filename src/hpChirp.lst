
AVRASM ver. 2.1.42  H:\AppNotes\Pflanzen\hpChirp\hpChirp.asm Wed Aug 14 15:17:29 2019

H:\AppNotes\Pflanzen\hpChirp\hpChirp.asm(9): Including file 'H:\AppNotes\Pflanzen\hpChirp\tn44Adef.inc'
                 
                 
                 ;* Dateiname            :"hpChirp.asm"
                 ;* Titel                :1MHz
                 ;* Datum                :08.07.2019
                 ;* Version              :1.0
                 ;* Ziel MCU           	:ATtiny84
                 ;***************************************************************************
                 
                 .include "tn44Adef.inc"
                 
                 ;***** Created: 2011-02-09 12:04 ******* Source: ATtiny44A.xml ***********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "tn44Adef.inc"
                 ;* Title             : Register/Bit Definitions for the ATtiny44A
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATtiny44A
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _TN44ADEF_INC_
                 #define _TN44ADEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATtiny44A
                 #pragma AVRPART ADMIN PART_NAME ATtiny44A
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x92
                 .equ	SIGNATURE_002	= 0x07
                 
                 #pragma AVRPART CORE CORE_VERSION V2
                 #pragma AVRPART CORE NEW_INSTRUCTIONS lpm rd,z+
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	OCR0B	= 0x3c
                 .equ	GIMSK	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK0	= 0x39
                 .equ	TIFR0	= 0x38
                 .equ	SPMCSR	= 0x37
                 .equ	OCR0A	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUSR	= 0x34
                 .equ	TCCR0B	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	TCCR0A	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	DWDR	= 0x27
                 .equ	CLKPR	= 0x26
                 .equ	ICR1L	= 0x24
                 .equ	ICR1H	= 0x25
                 .equ	GTCCR	= 0x23
                 .equ	TCCR1C	= 0x22
                 .equ	WDTCSR	= 0x21
                 .equ	PCMSK1	= 0x20
                 .equ	EEARH	= 0x1f
                 .equ	EEARL	= 0x1e
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTA	= 0x1b
                 .equ	DDRA	= 0x1a
                 .equ	PINA	= 0x19
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	GPIOR2	= 0x15
                 .equ	GPIOR1	= 0x14
                 .equ	GPIOR0	= 0x13
                 .equ	PCMSK0	= 0x12
                 .equ	USIBR	= 0x10
                 .equ	USIDR	= 0x0f
                 .equ	USISR	= 0x0e
                 .equ	USICR	= 0x0d
                 .equ	TIMSK1	= 0x0c
                 .equ	TIFR1	= 0x0b
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCH	= 0x05
                 .equ	ADCL	= 0x04
                 .equ	ADCSRB	= 0x03
                 .equ	DIDR0	= 0x01
                 .equ	PRR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Data Register, Port B
                 .equ	PORTB0	= 0	; 
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; 
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; 
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; 
                 .equ	PB3	= 3	; For compatibility
                 
                 ; DDRB - Data Direction Register, Port B
                 .equ	DDB0	= 0	; 
                 .equ	DDB1	= 1	; 
                 .equ	DDB2	= 2	; 
                 .equ	DDB3	= 3	; 
                 
                 ; PINB - Input Pins, Port B
                 .equ	PINB0	= 0	; 
                 .equ	PINB1	= 1	; 
                 .equ	PINB2	= 2	; 
                 .equ	PINB3	= 3	; 
                 
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; ADCSRB - ADC Control and Status Register B
                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	AINBG	= ACBG	; For compatibility
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 ; DIDR0 - 
                 .equ	ADC0D	= 0	; ADC 0 Digital input buffer disable
                 .equ	ADC1D	= 1	; ADC 1 Digital input buffer disable
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - ADC Multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bit 0
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bit 1
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bit 2
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bit 3
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bit 4
                 .equ	MUX5	= 5	; Analog Channel and Gain Selection Bit 5
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - ADC Control and Status Register A
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bit 0
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bit 1
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bit 2
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; ADC Auto Trigger Enable
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; ADCSRB - ADC Control and Status Register B
                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                 .equ	ADLAR	= 4	; ADC Left Adjust Result
                 .equ	BIN	= 7	; Bipolar Input Mode
                 
                 ; DIDR0 - Digital Input Disable Register 0
                 ;.equ	ADC0D	= 0	; ADC0 Digital Input Disable
                 ;.equ	ADC1D	= 1	; ADC1 Digital Input Disable
                 .equ	ADC2D	= 2	; ADC2 Digital Input Disable
                 .equ	ADC3D	= 3	; ADC3 Digital Input Disable
                 .equ	ADC4D	= 4	; ADC4 Digital Input Disable
                 .equ	ADC5D	= 5	; ADC5 Digital Input Disable
                 .equ	ADC6D	= 6	; ADC6 Digital Input Disable
                 .equ	ADC7D	= 7	; ADC7 Digital Input Disable
                 
                 
                 ; ***** USI **************************
                 ; USIBR - USI Buffer Register
                 .equ	USIBR0	= 0	; USI Buffer Register bit 0
                 .equ	USIBR1	= 1	; USI Buffer Register bit 1
                 .equ	USIBR2	= 2	; USI Buffer Register bit 2
                 .equ	USIBR3	= 3	; USI Buffer Register bit 3
                 .equ	USIBR4	= 4	; USI Buffer Register bit 4
                 .equ	USIBR5	= 5	; USI Buffer Register bit 5
                 .equ	USIBR6	= 6	; USI Buffer Register bit 6
                 .equ	USIBR7	= 7	; USI Buffer Register bit 7
                 
                 ; USIDR - USI Data Register
                 .equ	USIDR0	= 0	; USI Data Register bit 0
                 .equ	USIDR1	= 1	; USI Data Register bit 1
                 .equ	USIDR2	= 2	; USI Data Register bit 2
                 .equ	USIDR3	= 3	; USI Data Register bit 3
                 .equ	USIDR4	= 4	; USI Data Register bit 4
                 .equ	USIDR5	= 5	; USI Data Register bit 5
                 .equ	USIDR6	= 6	; USI Data Register bit 6
                 .equ	USIDR7	= 7	; USI Data Register bit 7
                 
                 ; USISR - USI Status Register
                 .equ	USICNT0	= 0	; USI Counter Value Bit 0
                 .equ	USICNT1	= 1	; USI Counter Value Bit 1
                 .equ	USICNT2	= 2	; USI Counter Value Bit 2
                 .equ	USICNT3	= 3	; USI Counter Value Bit 3
                 .equ	USIDC	= 4	; Data Output Collision
                 .equ	USIPF	= 5	; Stop Condition Flag
                 .equ	USIOIF	= 6	; Counter Overflow Interrupt Flag
                 .equ	USISIF	= 7	; Start Condition Interrupt Flag
                 
                 ; USICR - USI Control Register
                 .equ	USITC	= 0	; Toggle Clock Port Pin
                 .equ	USICLK	= 1	; Clock Strobe
                 .equ	USICS0	= 2	; USI Clock Source Select Bit 0
                 .equ	USICS1	= 3	; USI Clock Source Select Bit 1
                 .equ	USIWM0	= 4	; USI Wire Mode Bit 0
                 .equ	USIWM1	= 5	; USI Wire Mode Bit 1
                 .equ	USIOIE	= 6	; Counter Overflow Interrupt Enable
                 .equ	USISIE	= 7	; Start Condition Interrupt Enable
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; MCUCR - MCU Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 
                 ; GIMSK - General Interrupt Mask Register
                 .equ	GICR	= GIMSK	; For compatibility
                 .equ	PCIE0	= 4	; Pin Change Interrupt Enable 0
                 .equ	PCIE1	= 5	; Pin Change Interrupt Enable 1
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 
                 ; GIFR - General Interrupt Flag register
                 .equ	PCIF0	= 4	; Pin Change Interrupt Flag 0
                 .equ	PCIF1	= 5	; Pin Change Interrupt Flag 1
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 
                 ; PCMSK1 - Pin Change Enable Mask 1
                 .equ	PCINT8	= 0	; Pin Change Enable Mask Bit 8
                 .equ	PCINT9	= 1	; Pin Change Enable Mask Bit 9
                 .equ	PCINT10	= 2	; Pin Change Enable Mask Bit 10
                 .equ	PCINT11	= 3	; Pin Change Enable Mask Bit 11
                 
                 ; PCMSK0 - Pin Change Enable Mask 0
                 .equ	PCINT0	= 0	; Pin Change Enable Mask Bit 0
                 .equ	PCINT1	= 1	; Pin Change Enable Mask Bit 1
                 .equ	PCINT2	= 2	; Pin Change Enable Mask Bit 2
                 .equ	PCINT3	= 3	; Pin Change Enable Mask Bit 3
                 .equ	PCINT4	= 4	; Pin Change Enable Mask Bit 4
                 .equ	PCINT5	= 5	; Pin Change Enable Mask Bit 5
                 .equ	PCINT6	= 6	; Pin Change Enable Mask Bit 6
                 .equ	PCINT7	= 7	; Pin Change Enable Mask Bit 7
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEARL - EEPROM Address Register Low Byte
                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                 
                 ; EEARH - EEPROM Address Register High Byte
                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 0
                 
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEPE	= 1	; EEPROM Write Enable
                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCSR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK0 - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                 
                 ; TIFR0 - Timer/Counter0 Interrupt Flag Register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag A
                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag B
                 
                 ; TCCR0A - Timer/Counter  Control Register A
                 .equ	WGM00	= 0	; Waveform Generation Mode bit 0
                 .equ	WGM01	= 1	; Waveform Generation Mode bit 1
                 .equ	COM0B0	= 4	; Compare Match Output B Mode bit 0
                 .equ	COM0B1	= 5	; Compare Match Output B Mode bit 1
                 .equ	COM0A0	= 6	; Compare Match Output A Mode bit 0
                 .equ	COM0A1	= 7	; Compare Match Output A Mode bit 1
                 
                 ; TCCR0B - Timer/Counter Control Register B
                 .equ	CS00	= 0	; Clock Select bit 0
                 .equ	CS01	= 1	; Clock Select bit 1
                 .equ	CS02	= 2	; Clock Select bit 2
                 .equ	WGM02	= 3	; Waveform Generation Mode bit 2
                 .equ	FOC0B	= 6	; Force Output Compare B
                 .equ	FOC0A	= 7	; Force Output Compare A
                 
                 ; TCNT0 - Timer/Counter0
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0A - Timer/Counter0 Output Compare Register A
                 .equ	OCR0A_0	= 0	; 
                 .equ	OCR0A_1	= 1	; 
                 .equ	OCR0A_2	= 2	; 
                 .equ	OCR0A_3	= 3	; 
                 .equ	OCR0A_4	= 4	; 
                 .equ	OCR0A_5	= 5	; 
                 .equ	OCR0A_6	= 6	; 
                 .equ	OCR0A_7	= 7	; 
                 
                 ; OCR0B - Timer/Counter0 Output Compare Register B
                 .equ	OCR0_0	= 0	; 
                 .equ	OCR0_1	= 1	; 
                 .equ	OCR0_2	= 2	; 
                 .equ	OCR0_3	= 3	; 
                 .equ	OCR0_4	= 4	; 
                 .equ	OCR0_5	= 5	; 
                 .equ	OCR0_6	= 6	; 
                 .equ	OCR0_7	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/CounterN
                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR1 - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                 .equ	OCF1A	= 1	; Timer/Counter1 Output Compare A Match Flag
                 .equ	OCF1B	= 2	; Timer/Counter1 Output Compare B Match Flag
                 .equ	ICF1	= 5	; Timer/Counter1 Input Capture Flag
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Pulse Width Modulator Select Bit 0
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Pulse Width Modulator Select Bit 1
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	COM1B0	= 4	; Comparet Ouput Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Clock Select bit 0
                 .equ	CS11	= 1	; Clock Select 1 bit 1
                 .equ	CS12	= 2	; Clock Select1 bit 2
                 .equ	WGM12	= 3	; Waveform Generation Mode Bit 2
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode Bit 3
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 ; TCCR1C - Timer/Counter1 Control Register C
                 .equ	FOC1B	= 6	; Force Output Compare for Channel B
                 .equ	FOC1A	= 7	; Force Output Compare for Channel A
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCSR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	RFLB	= 3	; Read fuse and lock bits
                 .equ	CTPB	= 4	; Clear temporary page buffer
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 .equ	SM0	= 3	; Sleep Mode Select Bit 0
                 .equ	SM1	= 4	; Sleep Mode Select Bit 1
                 .equ	SE	= 5	; Sleep Enable
                 .equ	PUD	= 6	; 
                 
                 ; MCUSR - MCU Status Register
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; GPIOR2 - General Purpose I/O Register 2
                 .equ	GPIOR20	= 0	; 
                 .equ	GPIOR21	= 1	; 
                 .equ	GPIOR22	= 2	; 
                 .equ	GPIOR23	= 3	; 
                 .equ	GPIOR24	= 4	; 
                 .equ	GPIOR25	= 5	; 
                 .equ	GPIOR26	= 6	; 
                 .equ	GPIOR27	= 7	; 
                 
                 ; GPIOR1 - General Purpose I/O Register 1
                 .equ	GPIOR10	= 0	; 
                 .equ	GPIOR11	= 1	; 
                 .equ	GPIOR12	= 2	; 
                 .equ	GPIOR13	= 3	; 
                 .equ	GPIOR14	= 4	; 
                 .equ	GPIOR15	= 5	; 
                 .equ	GPIOR16	= 6	; 
                 .equ	GPIOR17	= 7	; 
                 
                 ; GPIOR0 - General Purpose I/O Register 0
                 .equ	GPIOR00	= 0	; 
                 .equ	GPIOR01	= 1	; 
                 .equ	GPIOR02	= 2	; 
                 .equ	GPIOR03	= 3	; 
                 .equ	GPIOR04	= 4	; 
                 .equ	GPIOR05	= 5	; 
                 .equ	GPIOR06	= 6	; 
                 .equ	GPIOR07	= 7	; 
                 
                 ; PRR - Power Reduction Register
                 .equ	PRADC	= 0	; Power Reduction ADC
                 .equ	PRUSI	= 1	; Power Reduction USI
                 .equ	PRTIM0	= 2	; Power Reduction Timer/Counter0
                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                 
                 ; CLKPR - Clock Prescale Register
                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lockbit
                 .equ	LB2	= 1	; Lockbit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock source
                 .equ	CKSEL1	= 1	; Select Clock source
                 .equ	CKSEL2	= 2	; Select Clock source
                 .equ	CKSEL3	= 3	; Select Clock source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	CKOUT	= 6	; Clock Output Enable
                 .equ	CKDIV8	= 7	; Divide clock by 8
                 
                 ; HIGH fuse bits
                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through the Chip Erase
                 .equ	WDTON	= 4	; Watchdog Timer always on
                 .equ	SPIEN	= 5	; Enable Serial Program and Data Downloading
                 .equ	DWEN	= 6	; DebugWIRE Enable
                 .equ	RSTDISBL	= 7	; External Reset disable
                 
                 ; EXTENDED fuse bits
                 .equ	SELFPRGEN	= 0	; Self-Programming Enable
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x07ff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 256
                 .equ	RAMEND	= 0x015f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x00ff
                 .equ	EEPROMEND	= 0x00ff
                 .equ	EEADRBITS	= 8
                 #pragma AVRPART MEMORY PROG_FLASH 4096
                 #pragma AVRPART MEMORY EEPROM 256
                 #pragma AVRPART MEMORY INT_SRAM SIZE 256
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x0
                 .equ	NRWW_STOP_ADDR	= 0x7ff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x0
                 .equ	PAGESIZE	= 32
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	EXT_INT0addr	= 0x0001	; External Interrupt Request 0
                 .equ	PCI0addr	= 0x0002	; Pin Change Interrupt Request 0
                 .equ	PCI1addr	= 0x0003	; Pin Change Interrupt Request 1
                 .equ	WATCHDOGaddr	= 0x0004	; Watchdog Time-out
                 .equ	ICP1addr	= 0x0005	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x0006	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0007	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0008	; Timer/Counter1 Overflow
                 .equ	OC0Aaddr	= 0x0009	; Timer/Counter0 Compare Match A
                 .equ	OC0Baddr	= 0x000a	; Timer/Counter0 Compare Match B
                 .equ	OVF0addr	= 0x000b	; Timer/Counter0 Overflow
                 .equ	ACIaddr	= 0x000c	; Analog Comparator
                 .equ	ADCCaddr	= 0x000d	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x000e	; EEPROM Ready
                 .equ	USI_STRaddr	= 0x000f	; USI START
                 .equ	USI_OVFaddr	= 0x0010	; USI Overflow
                 
                 .equ	INT_VECTORS_SIZE	= 17	; size in words
                 
                 #endif  /* _TN44ADEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                 #define _StandAlone_
                 ;#define _BeepTest_ ; bei jedem WatchDog 1 Beep, bei jeder Messung 2 Beep
                 
                 ;***** Globale Definitionen
                 .equ	true=0
                 .equ	false=-1
                 .equ	cTransferCountMax=16+1
                 .equ	cMesspufferMax=16
                 .equ	cChirpCounterMax=40
                 .equ	cMindestFeuchteCounterMax=8
                 ;.equ	cWatchDogCounterMax=225  ;ca 30Minuten
                 ;.equ	cWatchDogCounterMax=112  ;ca 12Minuten
                 .equ	cWatchDogCounterMax=48  ;ca 5Minuten
                 ;.equ	cWatchDogCounterMax=6
                 ;define LED_K=PB0
                 .equ	ledK_Port=PortB
                 .equ	ledK_Pin=PinB
                 .equ	ledK_DDR=DDRB
                 .equ	ledK_Bit=0
                 ;define LED_A PB1
                 .equ	ledA_Port=PortB
                 .equ	ledA_Pin=PinB
                 .equ	ledA_DDR=DDRB
                 .equ	ledA_Bit=1
                 ;define ClockOut 1MHz on PB2 (OC0A)
                 .equ	ClockOut_Port=PortB
                 .equ	ClockOut_Pin=PinB
                 .equ	ClockOut_DDR=DDRB
                 .equ	ClockOut_Bit=2
                 ;define SeriellDaten (MISO) on PA5
                 .equ	SeriellDaten_Port=PortA
                 .equ	SeriellDaten_Pin=PinA
                 .equ	SeriellDaten_DDR=DDRA
                 .equ	SeriellDaten_Bit=5
                 ;define SeriellSelect (MOSI) on PA6
                 .equ	SeriellSelect_Port=PortA
                 .equ	SeriellSelect_Pin=PinA
                 .equ	SeriellSelect_DDR=DDRA
                 .equ	SeriellSelect_Bit=6
                 ;define SeriellClock (CLK) on PA4
                 .equ	SeriellClock_Port=PortA
                 .equ	SeriellClock_Pin=PinA
                 .equ	SeriellClock_DDR=DDRA
                 .equ	SeriellClock_Bit=4
                 ;define Speaker on PA7
                 .equ	Speaker_Port=PortA
                 .equ	Speaker_Pin=PinA
                 .equ	Speaker_DDR=DDRA
                 .equ	Speaker_Bit=7
                 
                 ;***** CPU-Register
                 ;r0 bis r3 in MesspufferSummeBilden verwendet
                 .def rTransferL=r4
                 .def rTransferH=r5
                 .def rMesspufferSummeL=r6
                 .def rMesspufferSummeH=r7
                 .def rTransferCounter=r16
                 .def rMesspufferCounter=r17
                 .def rWaitCounter=r18
                 .def rChirpCounter=r19
                 .def rADCL=r20
                 .def rADCH=r21
                 .def rWatchDogCounter=r22
                 ;y als Pointer im Messpuffer verwendet
                 ;z als Pointer im Messpuffer verwendet
                 
                 ;***** 	Data
                 .dseg
000060           sWatchDogCounter: .Byte 1
000061           sMindestFeuchteCounter: .Byte 1
000062           sFeuchteL: .Byte 1
000063           sFeuchteH: .Byte 1
000064           sMindestFeuchteL: .Byte 1
000065           sMindestFeuchteH: .Byte 1
000066           sMesspufferSummeH: .Byte 1
000067           sMesspufferSummeL: .Byte 1
000068           sMesspufferL: .Byte cMesspufferMax
000078           sMesspufferH: .Byte cMesspufferMax
000088           sMist: .Byte 1
                 
                 .eseg
000000           eMist: .Byte 1
                 
                 ;***** Macro Definitionen
                 .macro Ausgang_Clock_Release
                 	cbi SeriellClock_Port,SeriellClock_Bit
                 	cbi SeriellClock_DDR,SeriellClock_Bit
                 .endm
                 
                 .macro Ausgang_Clock_PullDown
                 	cbi SeriellClock_Port,SeriellClock_Bit
                 	sbi SeriellClock_DDR,SeriellClock_Bit
                 .endm
                 
                 .macro Ausgang_Daten_Release
                 	cbi SeriellDaten_Port,SeriellDaten_Bit
                 	cbi SeriellDaten_DDR,SeriellDaten_Bit
                 .endm
                 
                 .macro Ausgang_Daten_PullDown
                 	cbi SeriellDaten_Port,SeriellDaten_Bit
                 	sbi SeriellDaten_DDR,SeriellDaten_Bit
                 .endm
                 
                 .macro DiddelDaddel
                 	rcall Beep
                 	ldi rWaitCounter,100 ;100ms
                 	rcall WaitXms
                 	rcall Beep
                 	ldi rWaitCounter,90 ;90ms
                 	rcall WaitXms
                 	rcall Beep
                 	ldi rWaitCounter,80 ;80ms
                 	rcall WaitXms
                 	rcall Beep
                 	ldi rWaitCounter,70 ;70ms
                 	rcall WaitXms
                 	rcall Beep
                 	ldi rWaitCounter,60 ;60ms
                 	rcall WaitXms
                 	rcall Beep
                 	ldi rWaitCounter,50 ;50ms
                 	rcall WaitXms
                 	rcall Beep
                 	ldi rWaitCounter,40 ;40ms
                 	rcall WaitXms
                 	rcall Beep
                 	ldi rWaitCounter,30 ;30ms
                 	rcall WaitXms
                 	rcall Beep
                 	ldi rWaitCounter,30 ;30ms
                 	rcall WaitXms
                 	rcall Beep
                 	ldi rWaitCounter,40 ;40ms
                 	rcall WaitXms
                 	rcall Beep
                 	ldi rWaitCounter,50 ;50ms
                 	rcall WaitXms
                 	rcall Beep
                 	ldi rWaitCounter,60 ;60ms
                 	rcall WaitXms
                 	rcall Beep
                 	ldi rWaitCounter,70 ;70ms
                 	rcall WaitXms
                 	rcall Beep
                 	ldi rWaitCounter,80 ;80ms
                 	rcall WaitXms
                 	rcall Beep
                 	ldi rWaitCounter,90 ;90ms
                 	rcall WaitXms
                 	rcall Beep
                 	ldi rWaitCounter,100 ;100ms
                 	rcall WaitXms
                 .endm
                 
                 .macro LedEin
                 	sbi ledA_DDR,ledA_Bit
                 	sbi ledA_Port,ledA_Bit
                 	sbi ledK_DDR,ledK_Bit
                 	cbi ledK_Port,ledK_Bit
                 .endm
                 
                 .macro LedAus
                 	sbi ledA_DDR,ledA_Bit
                 	cbi ledA_Port,ledA_Bit
                 	sbi ledK_DDR,ledK_Bit
                 	cbi ledK_Port,ledK_Bit
                 .endm
                 
                 .macro SpeakerInit
                 	sbi Speaker_DDR,Speaker_Bit
                 	cbi Speaker_Port,Speaker_Bit
                 	ldi xl,0
                 	out TCCR0A, xl
                 	out TCCR0B, xl
                 	ldi xl,(1<<COM0B1)|(1<<WGM00)
                 	out TCCR0A,xl
                 	ldi xl,(1<<CS00)
                 	out TCCR0B,xl
                 .endm
                 
                 .macro ClockOut_starten
                 	sbi ClockOut_DDR,ClockOut_Bit
                 	cbi Speaker_Port,Speaker_Bit
                 	ldi xl,0
                 	out OCR0A,xl
                 	ldi xl,(1<<COM0A0)|(1<<WGM01)
                 	out TCCR0A,xl
                 	ldi xl,(1<<CS00)
                 	out TCCR0B,xl
                 .endm
                 
                 .macro Timer0_stoppen
                 	ldi xl,0
                 	out TCCR0A,xl
                 	out TCCR0B,xl
                 	cbi ClockOut_Port,ClockOut_Bit
                 	cbi Speaker_Port,Speaker_Bit
                 .endm
                 
                 .macro FeuchteMessungSetup
                 	sbi DIDR0,ADC1D
                 	ldi xl,(1<<MUX0)
                 	out ADMUX,xl
                 	ldi xl,(1<<ADEN)+(1<<ADPS2)+(1<<ADPS0)
                 	out ADCSRA, xl
                 .endm
                 
                 .macro Abchalten_was_nicht_gebraucht_wird
                 	ldi xl, (1<<PRTIM1)+(1<<PRUSI)
                 	out PRR, xl
                 .endm
                 
                 .macro Wachhund_starten_lang
                 	ldi xl, (1<<WDCE)+(1<<WDE)
                 	out WDTCSR, xl
                 	ldi xl, (1<<WDIE)+(1<<WDP3)+(1<<WDP0) ; 8 Sekunden
                 	out WDTCSR, xl
                 .endm
                 
                 .macro Wachhund_starten_kurz
                 	ldi xl, (1<<WDCE)+(1<<WDE)
                 	out WDTCSR, xl
                 	ldi xl, (1<<WDIE)+(1<<WDP2) ; 0.25 Sekunde
                 	out WDTCSR, xl
                 .endm
                 
                 .macro Schlafen_bis_der_Wachhund_bellt
                 	Ausgang_Clock_Release
                 	Ausgang_Daten_Release
                 	LedAus
                 	sbi Speaker_DDR,Speaker_Bit
                 	cbi Speaker_Port,Speaker_Bit
                 	cbi DDRA,1 ; Messeingang
                 	sbi DDRB,2 ; ClockOut auf Output und LOW
                 	cbi PortB,2
                 	sbi DIDR0,ADC0D
                 	sbi DIDR0,ADC2D
                 	sbi DIDR0,ADC3D
                 	ldi xl,0 ;Ref auf VCC, Messung an an ADC1
                 	out ADMUX, xl
                 	ldi xl,0 ;ADC disabled
                 	out ADCSRA,xl
                 	ldi xl, (1<<PRTIM1)+(1<<PRTIM0)+(1<<PRUSI)+(1<<PRADC) ;Power Reduction: USI, Timer0 und Timer1 abschalten
                 	out PRR, xl
                 	ldi xl, (1<<SE)+(1<<SM1)+(1<<SM0) ;PowerDown einschalten, SleepMode einschalten
                 	out MCUCR, xl
                 	sleep
                 .endm
                 
                 ;***** 	Code
                 .cseg
                 .org	$0000 ;Reset
000000 c010      	rjmp isr_Reset
                 .org	EXT_INT0addr ;External Interrupt Request 0
000001 9518      	reti
                 .org	PCI0addr ;Pin Change Interrupt Request 0
000002 9518      	reti
                 .org	PCI1addr ;Pin Change Interrupt Request 1
000003 9518      	reti
                 .org	WATCHDOGaddr ;Watchdog Time-out
000004 c08a      	rjmp isr_WatchDog
                 .org	ICP1addr ;Timer/Counter1 Capture Event
000005 9518      	reti
                 .org	OC1Aaddr ;Timer/Counter1 Compare Match A
000006 9518      	reti
                 .org	OC1Baddr ;Timer/Counter1 Compare Match B
000007 9518      	reti
                 .org	OVF1addr ;Timer/Counter1 Overflow
000008 9518      	reti
                 .org	OC0Aaddr ;Timer/Counter0 Compare Match A
000009 9518      	reti
                 .org	OC0Baddr ;Timer/Counter0 Compare Match B
00000a 9518      	reti
                 .org	OVF0addr ;Timer/Counter0 Overflow
00000b 9518      	reti
                 .org	ACIaddr ;Analog Comparator
00000c 9518      	reti
                 .org	ADCCaddr ;ADC Conversion Complete
00000d 9518      	reti
                 .org	ERDYaddr ;EEPROM Ready
00000e 9518      	reti
                 .org	USI_STRaddr ;USI START
00000f 9518      	reti
                 .org	USI_OVFaddr ;USI Overflow
000010 9518      	reti
                 
                 .cseg
                 isr_Reset:
000011 e0b1      	ldi xh,HIGH(RAMEND)
000012 bfbe      	out SPH,xh
000013 e5af      	ldi xl,LOW(RAMEND)
000014 bfad      	out SPL,xl
000015 e0a0      	ldi xl,0
000016 b9a0      	out PRR,xl
000017 e0a0      	ldi xl,0
000018 93a0 0062 	sts sFeuchteL,xl
00001a 93a0 0063 	sts sFeuchteH,xl
00001c 93a0 0064 	sts sMindestFeuchteL,xl
00001e 93a0 0065 	sts sMindestFeuchteH,xl
000020 e0a2      	ldi xl,2
000021 93a0 0061 	sts sMindestFeuchteCounter,xl
000023 e034      	ldi rChirpCounter,4
000024 d116      	rcall Beep
000025 9aba
000026 98df
000027 e0a0
000028 bfa6
000029 e4a2
00002a bfa0
00002b e0a1
00002c bfa3      	ClockOut_starten
00002d d12c      	rcall MesspufferLoeschen
00002e 9a09
00002f e0a1
000030 b9a7
000031 e8a5
000032 b9a6      	FeuchteMessungSetup
000033 ef2a      	ldi rWaitCounter,250 ;250ms
000034 d170      .	rcall WaitXms
000035 ef2a      	ldi rWaitCounter,250 ;250ms
000036 d16e      .	rcall WaitXms
000037 d0aa      	rcall MindestFeuchteMessen
000038 e0a0
000039 bfa0
00003a bfa3
00003b 98c2
00003c 98df      	Timer0_stoppen
00003d d0fd
00003e e624
00003f d165
000040 d0fa
000041 e52a
000042 d162
000043 d0f7
000044 e520
000045 d15f
000046 d0f4
000047 e426
000048 d15c
000049 d0f1
00004a e32c
00004b d159
00004c d0ee
00004d e322
00004e d156
00004f d0eb
000050 e228
000051 d153
000052 d0e8
000053 e12e
000054 d150
000055 d0e5
000056 e12e
000057 d14d
000058 d0e2
000059 e228
00005a d14a
00005b d0df
00005c e322
00005d d147
00005e d0dc
00005f e32c
000060 d144
000061 d0d9
000062 e426
000063 d141
000064 d0d6
000065 e520
000066 d13e
000067 d0d3
000068 e52a
000069 d13b
00006a d0d0
00006b e624
00006c d138      	DiddelDaddel
00006d e061      	ldi rWatchDogCounter,1 ; Nur ein Schlafzyklus
00006e e1a8
00006f bda1
000070 e6a1
000071 bda1      	Wachhund_starten_lang
000072 9478      	sei
000073 9360 0060 	sts sWatchDogCounter,rWatchDogCounter
                 isr_ResetExit:
000075 98dc
000076 98d4
000077 98dd
000078 98d5
000079 9ab9
00007a 98c1
00007b 9ab8
00007c 98c0
00007d 9ad7
00007e 98df
00007f 98d1
000080 9aba
000081 98c2
000082 9a08
000083 9a0a
000084 9a0b
000085 e0a0
000086 b9a7
000087 e0a0
000088 b9a6
000089 e0af
00008a b9a0
00008b e3a8
00008c bfa5
00008d 9588      	Schlafen_bis_der_Wachhund_bellt
00008e cfe6      	rjmp isr_ResetExit
                 
                 isr_WatchDog:
00008f e0b1      	ldi xh,HIGH(RAMEND)
000090 bfbe      	out SPH,xh
000091 e5af      	ldi xl,LOW(RAMEND)
000092 bfad      	out SPL,xl
000093 95a8      	wdr
000094 94f8      	cli
000095 e0a0      	ldi xl,0
000096 b9a0      	out PRR,xl
000097 e0a0      	ldi xl,(0<<WDRF)
000098 bfa4      	out MCUSR,xl
000099 d07f      	rcall ggfSeriellTransfer
00009a 9160 0060 	lds rWatchDogCounter,sWatchDogCounter
00009c 956a      	dec rWatchDogCounter
00009d f511      	brne isr_WatchDog1
00009e e360      	ldi rWatchDogCounter,cWatchDogCounterMax
                   	#ifdef _BeepTest_
                   	#endif
00009f 9aba
0000a0 98df
0000a1 e0a0
0000a2 bfa6
0000a3 e4a2
0000a4 bfa0
0000a5 e0a1
0000a6 bfa3      	ClockOut_starten
0000a7 9a09
0000a8 e0a1
0000a9 b9a7
0000aa e8a5
0000ab b9a6      	FeuchteMessungSetup
0000ac ef2a      	ldi rWaitCounter,250 ;250ms
0000ad d0f7      	rcall WaitXms
0000ae ef2a      	ldi rWaitCounter,250 ;250ms
0000af d0f5      	rcall WaitXms
0000b0 d03e      	rcall FeuchteMessen
0000b1 9260 0062 	sts sFeuchteL,rMesspufferSummeL
0000b3 9270 0063 	sts sFeuchteH,rMesspufferSummeH
0000b5 e0a0
0000b6 bfa0
0000b7 bfa3
0000b8 98c2
0000b9 98df      	Timer0_stoppen
0000ba e1a8
0000bb bda1
0000bc e6a1
0000bd bda1      	Wachhund_starten_lang
0000be d048      	rcall ggfErdeTrocken
0000bf c004      	rjmp isr_WatchDog2
                 isr_WatchDog1:
                   	#ifdef _BeepTest_
                 	#endif
0000c0 e1a8
0000c1 bda1
0000c2 e6a1
0000c3 bda1       	Wachhund_starten_lang
                 isr_WatchDog2:
0000c4 9360 0060 	sts sWatchDogCounter,rWatchDogCounter
0000c6 95a8      	wdr
0000c7 9478      	sei
                 isr_WatchDogExit:
0000c8 98dc
0000c9 98d4
0000ca 98dd
0000cb 98d5
0000cc 9ab9
0000cd 98c1
0000ce 9ab8
0000cf 98c0
0000d0 9ad7
0000d1 98df
0000d2 98d1
0000d3 9aba
0000d4 98c2
0000d5 9a08
0000d6 9a0a
0000d7 9a0b
0000d8 e0a0
0000d9 b9a7
0000da e0a0
0000db b9a6
0000dc e0af
0000dd b9a0
0000de e3a8
0000df bfa5
0000e0 9588      	Schlafen_bis_der_Wachhund_bellt
0000e1 cfe6      	rjmp isr_WatchDogExit
                 
                 MindestFeuchteMessen:
                 	// Nach Reset Feuchte messen und Schaltschwelle setzen
0000e2 e1a4      	ldi xl,20
                 MindestFeuchteMessen1:
0000e3 ef2a      	ldi rWaitCounter,250 ;250ms
0000e4 d0c0      .	rcall WaitXms
0000e5 ef2a      	ldi rWaitCounter,250 ;250ms
0000e6 d0be      .	rcall WaitXms
0000e7 d007      	rcall FeuchteMessen
0000e8 9260 0064 	sts sMindestFeuchteL,rMesspufferSummeL
0000ea 9270 0065 	sts sMindestFeuchteH,rMesspufferSummeH
0000ec 95aa      	dec xl
0000ed f7a9      	brne MindestFeuchteMessen1
0000ee 9508      	ret
                 
                 FeuchteMessen:
0000ef 93af      	push xl
0000f0 93bf      	push xh
0000f1 d08f      	rcall MesspufferSchieben
0000f2 9a36      	sbi ADCSRA,ADSC
                 FeuchteMessen1:
0000f3 9936      	sbic ADCSRA,ADSC
0000f4 cffe      	rjmp FeuchteMessen1
0000f5 b144      	in rADCL,ADCL
0000f6 b155      	in rADCH,ADCH ;1ste Messung fuer die Tonne
                 FeuchteMessen2:
0000f7 9936      	sbic ADCSRA,ADSC
0000f8 cffe      	rjmp FeuchteMessen2
0000f9 b144      	in rADCL,ADCL
0000fa b155      	in rADCH,ADCH
0000fb efaf      	ldi xl,LOW(1023)
0000fc e0b3      	ldi xh,HIGH(1023)
0000fd 1ba4      	sub xl,rADCL
0000fe 0bb5      	sbc xh,rADCH
0000ff 93a0 0077 	sts sMesspufferL+cMesspufferMax-1,xl
000101 93b0 0087 	sts sMesspufferH+cMesspufferMax-1,xh
000103 d065      	rcall MesspufferSummeBilden
000104 91bf      	pop xh
000105 91af      	pop xl
000106 9508      	ret
                 
                 ggfErdeTrocken:
000107 91a0 0062 	lds xl,sFeuchteL
000109 91b0 0063 	lds xh,sFeuchteH
00010b 91c0 0064 	lds yl,sMindestFeuchteL
00010d 91d0 0065 	lds yh,sMindestFeuchteH
00010f 17ac      	cp xl,yl
000110 07bd      	cpc xh,yh
000111 f430      	brcc ggfErdeTrockenExit
000112 d03d      	rcall Chirp
000113 e061      	ldi rWatchDogCounter,1 ; Nur ein Schlafzyklus
000114 e1a8
000115 bda1
000116 e4a4
000117 bda1      	Wachhund_starten_kurz
                 ggfErdeTrockenExit:
000118 9508      	ret
                 
                 ggfSeriellTransfer:
                 	#ifndef _StandAlone_
                 	#endif
                 ggfSeriellTransferExit:
000119 9508      	ret
                 
                 SeriellTransfer:
00011a e101      	ldi rTransferCounter,cTransferCountMax
                 SeriellTransfer1:
                 ;	sbic SeriellSelect_Pin,SeriellSelect_Bit
                 ;	rjmp SeriellTransferExit
                 SeriellTransfer1a:
00011b 950a      	dec rTransferCounter
00011c f0a9      	breq SeriellTransferExit
00011d 9ab9
00011e 9ac1
00011f 9ab8
000120 98c0      	LedEin
000121 0c44      	lsl rTransferL
000122 1c55      	rol rTransferH
000123 f418      	brcc SeriellTransfer2
000124 98dd
000125 98d5      	Ausgang_Daten_Release
000126 c002      	rjmp SeriellTransfer3
                 SeriellTransfer2:
000127 98dd
000128 9ad5      	Ausgang_Daten_PullDown
                 SeriellTransfer3:
000129 98dc
00012a 9ad4        	Ausgang_Clock_PullDown
00012b d068      rcall Wait100
00012c 98dc
00012d 98d4        	Ausgang_Clock_Release
00012e 98dd
00012f 98d5      	Ausgang_Daten_Release
000130 d063      	rcall Wait100
000131 cfe9      	rjmp SeriellTransfer1a
                 SeriellTransferExit:
000132 98dc
000133 98d4        	Ausgang_Clock_Release
000134 98dd
000135 98d5      	Ausgang_Daten_Release
000136 9ab9
000137 98c1
000138 9ab8
000139 98c0      	LedAus
00013a 9508      	ret
                 
                 Beep:
00013b 93af      	push xl
00013c 9ad7
00013d 98df
00013e e0a0
00013f bfa0
000140 bfa3
000141 e2a1
000142 bfa0
000143 e0a1
000144 bfa3      	SpeakerInit
000145 e3a0      	ldi xl,48
000146 bfac      	out OCR0B,xl
000147 e228      	ldi rWaitCounter,40 ;40ms
000148 d05c      	rcall WaitXms
000149 e0a0
00014a bfa0
00014b bfa3
00014c 98c2
00014d 98df      	Timer0_stoppen
00014e 91af      	pop xl
00014f 9508      	ret
                 
                 Chirp:
000150 953a      	dec rChirpCounter
000151 f439      	brne ChirpExit
000152 e238      	ldi rChirpCounter,cChirpCounterMax
000153 e0a7      	ldi xl,7
                 Chirp1:
000154 dfe6      	rcall Beep
000155 e228      	ldi rWaitCounter,40 ;40ms
000156 d04e      	rcall WaitXms
000157 95aa      	dec xl
000158 f7d9      	brne Chirp1
                 ChirpExit:
000159 9508      	ret
                 
                 MesspufferLoeschen:
00015a e0d0      	ldi yh,high(sMesspufferL)
00015b e6c8      	ldi yl,low(sMesspufferL)
00015c 2400      	clr r0
00015d e110      	ldi rMesspufferCounter, cMesspufferMax
                 MesspufferLoeschenA:
00015e 9209      	st y+,r0
00015f 951a      	dec rMesspufferCounter
000160 f7e9      	brne MesspufferLoeschenA
000161 e0d0      	ldi yh,high(sMesspufferH)
000162 e7c8      	ldi yl,low(sMesspufferH)
000163 2400      	clr r0
000164 e110      	ldi rMesspufferCounter, cMesspufferMax
                 MesspufferLoeschenB:
000165 9209      	st y+,r0
000166 951a      	dec rMesspufferCounter
000167 f7e9      	brne MesspufferLoeschenB
000168 9508      	ret
                 
                 MesspufferSummeBilden:
000169 e0d0      	ldi yh,high(sMesspufferL)
00016a e6c8      	ldi yl,low(sMesspufferL)
00016b e0f0      	ldi zh,high(sMesspufferH)
00016c e7e8      	ldi zl,low(sMesspufferH)
00016d 2422      	clr r2
00016e 2433      	clr r3
00016f e110      	ldi rMesspufferCounter,cMesspufferMax
                 MesspufferSummeBildenA:
000170 9009      	ld r0,y+
000171 9011      	ld r1,z+
000172 0c20      	add r2,r0
000173 1c31      	adc r3,r1
000174 951a      	dec rMesspufferCounter
000175 f7d1      	brne MesspufferSummeBildenA
000176 9436      	lsr r3
000177 9427      	ror r2
000178 9436      	lsr r3
000179 9427      	ror r2
00017a 9436      	lsr r3
00017b 9427      	ror r2
00017c 9436      	lsr r3
00017d 9427      	ror r2
00017e 2c62      	mov rMesspufferSummeL,r2
00017f 2c73      	mov rMesspufferSummeH,r3
000180 9508      	ret
                 
                 MesspufferSchieben:
000181 e0f0      	ldi zh,high(sMesspufferL+1)
000182 e6e9      	ldi zl,low(sMesspufferL+1)
000183 e0d0      	ldi yh,high(sMesspufferL)
000184 e6c8      	ldi yl,low(sMesspufferL)
000185 e01f      	ldi rMesspufferCounter,cMesspufferMax-1
                 MesspufferSchiebenA:
000186 9001      	ld r0,z+
000187 9209      	st y+,r0
000188 951a      	dec rMesspufferCounter
000189 f7e1      	brne MesspufferSchiebenA
00018a e0f0      	ldi zh,high(sMesspufferH+1)
00018b e7e9      	ldi zl,low(sMesspufferH+1)
00018c e0d0      	ldi yh,high(sMesspufferH)
00018d e7c8      	ldi yl,low(sMesspufferH)
00018e e01f      	ldi rMesspufferCounter,cMesspufferMax-1
                 MesspufferSchiebenB:
00018f 9001      	ld r0,z+
000190 9209      	st y+,r0
000191 951a      	dec rMesspufferCounter
000192 f7e1      	brne MesspufferSchiebenB
000193 9508      	ret
                 
                 Wait100:
                 	;100micros Verzoegerungsschleife bei 1MHz Takt
000194 932f      	push rWaitCounter
000195 0000      	nop
000196 e126      	ldi rWaitCounter,$16
                 Wait100A:
000197 0000      	nop
000198 952a      	dec rWaitCounter
000199 f7e9      	brne Wait100A
00019a 912f      	pop rWaitCounter
00019b 9508      	ret
                 
                 Wait1ms:
00019c 932f      	push rWaitCounter
00019d 95a8      	wdr
00019e ec26      	ldi rWaitCounter,$C6 ;$C6 bei 1MHz, $17 bei 128kHz
                 Wait1ms1:
00019f 95a8      	wdr
0001a0 0000      	nop
0001a1 952a      	dec rWaitCounter
0001a2 f7e1      	brne Wait1ms1
0001a3 912f      	pop rWaitCounter
0001a4 9508      	ret
                 
                 WaitXms:
0001a5 dff6      	rcall Wait1ms
0001a6 952a      	dec rWaitCounter
0001a7 f7e9      	brne WaitXms
0001a8 9508      	ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny44A register use summary:
r0 :  10 r1 :   2 r2 :   7 r3 :   7 r4 :   1 r5 :   1 r6 :   3 r7 :   3 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   2 r17:  10 r18:  33 r19:   3 r20:   3 r21:   3 r22:   7 r23:   0 
r24:   0 r25:   0 r26: 100 r27:  11 r28:   7 r29:   7 r30:   3 r31:   3 
x  :   0 y  :   5 z  :   3 
Registers used: 23 out of 35 (65.7%)

ATtiny44A instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   1 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   0 break :   0 breq  :   1 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  12 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 cbi   :  42 cbr   :   0 clc   :   0 
clh   :   0 cli   :   1 cln   :   0 clr   :   4 cls   :   0 clt   :   0 
clv   :   0 clz   :   0 com   :   0 cp    :   1 cpc   :   1 cpi   :   0 
cpse  :   0 dec   :  13 eor   :   0 icall :   0 ijmp  :   0 in    :   4 
inc   :   0 ld    :   4 ldd   :   0 ldi   :  99 lds   :   5 lpm   :   0 
lsl   :   1 lsr   :   4 mov   :   2 movw  :   0 neg   :   0 nop   :   3 
or    :   0 ori   :   0 out   :  44 pop   :   5 push  :   5 rcall :  54 
ret   :  13 reti  :  15 rjmp  :   9 rol   :   1 ror   :   4 sbc   :   1 
sbci  :   0 sbi   :  27 sbic  :   2 sbis  :   0 sbiw  :   0 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   2 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   2 
spm   :   0 st    :   4 std   :   0 sts   :  13 sub   :   1 subi  :   0 
swap  :   0 tst   :   0 wdr   :   4 
Instructions used: 37 out of 105 (35.2%)

ATtiny44A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000352    850      0    850    4096  20.8%
[.dseg] 0x000060 0x000089      0     41     41     256  16.0%
[.eseg] 0x000000 0x000001      0      1      1     256   0.4%

Assembly complete, 0 errors, 0 warnings
